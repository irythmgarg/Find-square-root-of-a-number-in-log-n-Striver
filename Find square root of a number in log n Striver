class Solution {
  public:
    int floorSqrt(int n) {
      // Initialize the search space
      int s = 1;           // Start of the range (smallest possible integer for square root)
      int e = n / 2;       // End of the range (square root of n cannot be more than n/2 for n > 1)
      int ans = INT_MIN;   // Variable to store the result (maximum integer whose square is ≤ n)

      // Perform binary search to find the floor of the square root
      while (s <= e) {
          // Calculate the mid-point of the current range
          int mid = (s + e) / 2;

          // Check if mid*mid is less than or equal to n
          if (mid * mid <= n) {
              // Update the answer to the current mid (as it's a valid candidate)
              ans = max(ans, mid);

              // Move the search range to the right to find a potentially larger candidate
              s = mid + 1;
          } else {
              // If mid*mid is greater than n, move the search range to the left
              e = mid - 1;
          }
      }

      // Return the largest integer whose square is ≤ n
      return ans;
    }
};
